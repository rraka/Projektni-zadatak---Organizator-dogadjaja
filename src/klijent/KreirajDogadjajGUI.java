/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package klijent;

import dogadjaj.Dogadjaj;
import dogadjaj.Izlozba;
import dogadjaj.Koncert;
import dogadjaj.OstaliDogadjaji;
import dogadjaj.Predavanje;
import dogadjaj.Promocija;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.Inet4Address;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;
import osoba.Organizator;
import osoba.Predavac;
import osoba.Ucesnik;
import poruka.Poruka;

/**
 *
 * @author raka
 */
public class KreirajDogadjajGUI extends javax.swing.JFrame {

    private PocetnaGUI pocetnaGUI;
    private static final int PORT = 9000;
    private static Socket soket;
    private static ObjectOutputStream oos;
    private static ObjectInputStream ois;
    private static ArrayList<Organizator> sviOrganizatori;
    private static ArrayList<Predavac> sviPredavaci;
    private static ArrayList<Ucesnik> sviUcesnici;
    private static DefaultTableModel modelTabelaUcesnici;
    private static ArrayList<Ucesnik> sviUcesniciNaJednomDogadjaju;
    
    
    
    public KreirajDogadjajGUI(PocetnaGUI pocetnaGUI) {
        try {
            initComponents();
            InetAddress adresa = InetAddress.getByName("127.0.0.1");
            soket = new Socket(adresa, PORT);
            oos = PocetnaGUI.getOos();
            ois = PocetnaGUI.getOis();
            
            this.pocetnaGUI = pocetnaGUI; 
            
            dodatnaLabel1.setText("Tema:");
            dodatnaLabel2.setText("Autor:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(true);
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(true);
            predavacDogadjajLabel.setVisible(false);
            predavacDogadjajComboBox.setVisible(false);
            
            sviOrganizatori = new ArrayList<>();
            sviOrganizatori = getSviOrganizatori();
            sviPredavaci = new ArrayList<>();
            sviUcesnici = new ArrayList<>();
            sviOrganizatori = getSviOrganizatori();
            sviUcesnici = getSviUcesnici();
            sviPredavaci = getSviPredavaci();
            
            popuniOrganizatoriComboBox(organizatorDogadjajaComboBox);
            popuniUcesniciComboBox(ucesnikDogadjajaComboBox);
            popuniPredavaciComboBox(predavacDogadjajComboBox);
            
            sviUcesniciNaJednomDogadjaju = new ArrayList<>();//lista odabranih ucesnika na jednom dogadjaju
            modelTabelaUcesnici = (DefaultTableModel) ucesniciNaDogadjajuTable.getModel();  
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
           // this.pocetnaGUI = pocetnaGUI;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        gornjiPanel = new javax.swing.JPanel();
        dogadjajiComboBox = new javax.swing.JComboBox<>();
        dogadjajLabel = new javax.swing.JLabel();
        kreiranjeDogadjajaiLabel = new javax.swing.JLabel();
        nazivDogadjajaLabel = new javax.swing.JLabel();
        datumDogadjajaLabel = new javax.swing.JLabel();
        vrijemeDogadjajaLabel = new javax.swing.JLabel();
        opisDogadjajaLabel = new javax.swing.JLabel();
        organizatorDogadjajaLabel = new javax.swing.JLabel();
        jLabel22 = new javax.swing.JLabel();
        datumDogadjajaDateChooser = new com.toedter.calendar.JDateChooser();
        vrijemeSatPocetakDogadjajaTextField = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        vrijemeMinutPocetakDogadjajaTextField = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        vrijemeSatKrajDogadjajaTextField = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        vrijemeMinutKrajDogadjajaTextField = new javax.swing.JTextField();
        opisDogadjajaTextField = new javax.swing.JTextField();
        organizatorDogadjajaComboBox = new javax.swing.JComboBox<>();
        ucesnikDogadjajaComboBox = new javax.swing.JComboBox<>();
        jScrollPane1 = new javax.swing.JScrollPane();
        ucesniciNaDogadjajuTable = new javax.swing.JTable();
        dodajUcesnikaUTabeluButton = new javax.swing.JButton();
        dodatnaLabel1 = new javax.swing.JLabel();
        dodatniTextField1 = new javax.swing.JTextField();
        dodatnaLabel2 = new javax.swing.JLabel();
        predavacDogadjajLabel = new javax.swing.JLabel();
        dodatniTextField2 = new javax.swing.JTextField();
        predavacDogadjajComboBox = new javax.swing.JComboBox<>();
        nazivDogadjajaTextField = new javax.swing.JTextField();
        zavrsiKreiranjeDogadjajaDugme = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(750, 420));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        gornjiPanel.setPreferredSize(new java.awt.Dimension(700, 400));

        dogadjajiComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Izložba", "Predavanje", "Promocija", "Koncert", "Ostali događaji" }));
        dogadjajiComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dogadjajiComboBoxActionPerformed(evt);
            }
        });

        dogadjajLabel.setText("Događaj:");

        kreiranjeDogadjajaiLabel.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        kreiranjeDogadjajaiLabel.setText("KREIRANJE DOGAĐAJA");

        nazivDogadjajaLabel.setText("Naziv:");

        datumDogadjajaLabel.setText("Datum:");

        vrijemeDogadjajaLabel.setText("Vrijeme:");

        opisDogadjajaLabel.setText("Opis:");

        organizatorDogadjajaLabel.setText("Organizator:");

        jLabel22.setText("Ucesnik:");

        datumDogadjajaDateChooser.setDateFormatString("dd.MM.yyyy");

        jLabel1.setText(":");

        jLabel2.setText("-");

        jLabel3.setText(":");

        ucesniciNaDogadjajuTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Ime", "Prezime", "Organizacija"
            }
        ));
        jScrollPane1.setViewportView(ucesniciNaDogadjajuTable);
        if (ucesniciNaDogadjajuTable.getColumnModel().getColumnCount() > 0) {
            ucesniciNaDogadjajuTable.getColumnModel().getColumn(0).setPreferredWidth(60);
            ucesniciNaDogadjajuTable.getColumnModel().getColumn(1).setPreferredWidth(80);
        }

        dodajUcesnikaUTabeluButton.setText("Dodaj ucesnika");
        dodajUcesnikaUTabeluButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajUcesnikaUTabeluButtonActionPerformed(evt);
            }
        });

        dodatnaLabel1.setText("slobodna");

        dodatnaLabel2.setText("slobodna");

        predavacDogadjajLabel.setText("Predavac:");

        zavrsiKreiranjeDogadjajaDugme.setText("Kreiraj dogadjaj");
        zavrsiKreiranjeDogadjajaDugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                zavrsiKreiranjeDogadjajaDugmeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout gornjiPanelLayout = new javax.swing.GroupLayout(gornjiPanel);
        gornjiPanel.setLayout(gornjiPanelLayout);
        gornjiPanelLayout.setHorizontalGroup(
            gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(gornjiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                        .addComponent(dodatnaLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(nazivDogadjajaLabel)
                            .addComponent(datumDogadjajaLabel)
                            .addComponent(vrijemeDogadjajaLabel)
                            .addComponent(opisDogadjajaLabel)
                            .addComponent(organizatorDogadjajaLabel)
                            .addComponent(dodatnaLabel2)
                            .addComponent(predavacDogadjajLabel)
                            .addComponent(dogadjajLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 54, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(gornjiPanelLayout.createSequentialGroup()
                                .addComponent(dogadjajiComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 152, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap())
                            .addGroup(gornjiPanelLayout.createSequentialGroup()
                                .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(dodatniTextField1)
                                    .addComponent(datumDogadjajaDateChooser, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                                        .addComponent(vrijemeSatPocetakDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel1)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(vrijemeMinutPocetakDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel2)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(vrijemeSatKrajDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(jLabel3)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(vrijemeMinutKrajDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(opisDogadjajaTextField)
                                    .addComponent(organizatorDogadjajaComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(dodatniTextField2)
                                    .addComponent(predavacDogadjajComboBox, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(nazivDogadjajaTextField))
                                .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                                        .addGap(33, 33, 33)
                                        .addComponent(kreiranjeDogadjajaiLabel)
                                        .addGap(0, 0, Short.MAX_VALUE))
                                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                                        .addGap(18, 18, 18)
                                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                            .addComponent(zavrsiKreiranjeDogadjajaDugme, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addGroup(gornjiPanelLayout.createSequentialGroup()
                                                .addComponent(jLabel22)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                                                        .addComponent(ucesnikDogadjajaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                        .addComponent(dodajUcesnikaUTabeluButton, javax.swing.GroupLayout.PREFERRED_SIZE, 125, javax.swing.GroupLayout.PREFERRED_SIZE))
                                                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 360, javax.swing.GroupLayout.PREFERRED_SIZE))))
                                        .addContainerGap(36, Short.MAX_VALUE))))))))
        );
        gornjiPanelLayout.setVerticalGroup(
            gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, gornjiPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(kreiranjeDogadjajaiLabel)
                .addGap(18, 18, Short.MAX_VALUE)
                .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dogadjajiComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dogadjajLabel))
                .addGap(18, 18, 18)
                .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(nazivDogadjajaLabel)
                    .addComponent(jLabel22)
                    .addComponent(ucesnikDogadjajaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(nazivDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodajUcesnikaUTabeluButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(datumDogadjajaLabel)
                            .addComponent(datumDogadjajaDateChooser, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(vrijemeDogadjajaLabel)
                            .addComponent(vrijemeSatPocetakDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1)
                            .addComponent(vrijemeMinutPocetakDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2)
                            .addComponent(vrijemeSatKrajDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3)
                            .addComponent(vrijemeMinutKrajDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(opisDogadjajaLabel)
                            .addComponent(opisDogadjajaTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(organizatorDogadjajaLabel)
                            .addComponent(organizatorDogadjajaComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dodatnaLabel1)
                            .addComponent(dodatniTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(dodatnaLabel2)
                            .addComponent(dodatniTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(gornjiPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(predavacDogadjajLabel)
                            .addComponent(predavacDogadjajComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(gornjiPanelLayout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(44, 44, 44)
                        .addComponent(zavrsiKreiranjeDogadjajaDugme)))
                .addGap(98, 98, 98))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gornjiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 702, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(gornjiPanel, javax.swing.GroupLayout.PREFERRED_SIZE, 371, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        // TODO add your handling code here:
        pocetnaGUI.setVisible(true);
    }//GEN-LAST:event_formWindowClosed

    private void dogadjajiComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dogadjajiComboBoxActionPerformed
        // TODO add your handling code here:
        String dogadjaj = (String) dogadjajiComboBox.getSelectedItem();
        if (dogadjaj.equals("Izložba")) {
            System.out.println("broj: " + dogadjaj);
            dodatnaLabel1.setText("Tema:");
            dodatnaLabel2.setText("Autor:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(true);
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(true);
            predavacDogadjajLabel.setVisible(false);
            predavacDogadjajComboBox.setVisible(false);

            // donjiPanel.add(gornjiPanel);
            // donjiPanel.add(donjiPanel);
            // donjiPanel.add(izlozbaKreiranjeDogadjajaPanel);
            // donjiPanel.repaint();
            // donjiPanel.revalidate();
        } else if (dogadjaj.equals("Predavanje")) {
            dodatnaLabel1.setText("Tema:");
            dodatnaLabel2.setText("Sadrzaj:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(true);
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(true);
            predavacDogadjajLabel.setVisible(true);
            predavacDogadjajComboBox.setVisible(true);

        } else if (dogadjaj.equals("Promocija")) {
            System.out.println("broj: " + dogadjaj);
            dodatnaLabel1.setText("Proizvod:");
            dodatnaLabel2.setText("Kompanija:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(true);
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(true);
            predavacDogadjajLabel.setVisible(false);
            predavacDogadjajComboBox.setVisible(false);
        } else if (dogadjaj.equals("Koncert")) {
            dodatnaLabel1.setText("Izvodjac:");
            dodatnaLabel2.setText("Trajanje:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(true);
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(true);
            predavacDogadjajLabel.setVisible(false);
            predavacDogadjajComboBox.setVisible(false);
        } else if (dogadjaj.equals("Ostali događaji")) {
            System.out.println("broj: " + dogadjaj);
            dodatnaLabel1.setVisible(false);
            dodatnaLabel2.setVisible(false);
            dodatniTextField1.setVisible(false);
            dodatniTextField2.setVisible(false);
            predavacDogadjajLabel.setVisible(false);
            predavacDogadjajComboBox.setVisible(false);
        }
    }//GEN-LAST:event_dogadjajiComboBoxActionPerformed

    private void zavrsiKreiranjeDogadjajaDugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_zavrsiKreiranjeDogadjajaDugmeActionPerformed
        try {
            String nazivDogadjaja = nazivDogadjajaTextField.getText();
            Calendar datumDogadjaja = datumDogadjajaDateChooser.getCalendar();
            Calendar vrijemeKraja = Calendar.getInstance();
//            SimpleDateFormat formatDatum = new SimpleDateFormat("dd.MM.yyyy");
//            String formatiranDatum = formatDatum.format(datumDogadjaja.getTime());
            int satPocetka = Integer.parseInt(vrijemeSatPocetakDogadjajaTextField.getText());
            int minutPocetka = Integer.parseInt(vrijemeMinutPocetakDogadjajaTextField.getText());
            int satKraja = Integer.parseInt(vrijemeSatKrajDogadjajaTextField.getText());
            int minutKraja = Integer.parseInt(vrijemeMinutKrajDogadjajaTextField.getText());
            datumDogadjaja.set(Calendar.HOUR_OF_DAY, satPocetka);
            datumDogadjaja.set(Calendar.MINUTE, minutPocetka);
            vrijemeKraja.set(Calendar.HOUR_OF_DAY, satKraja);
            vrijemeKraja.set(Calendar.MINUTE, minutKraja);
            String opisDogadjaja = opisDogadjajaTextField.getText();
            Organizator organizatorDogadjaja = (Organizator) organizatorDogadjajaComboBox.getSelectedItem();
            System.out.println("ORGANIZATOR DOGADJAJA IZABRAN IZ KOMBO BOXA: " + organizatorDogadjaja);
            
            if((dogadjajiComboBox.getSelectedItem()).equals("Izložba")){
                String vrstaDogadjaja = "Izlozba";
                String temaIzlozbe = dodatniTextField1.getText();
                String autorIzlozbe = dodatniTextField2.getText();
                Izlozba novaIzlozba = new Izlozba(temaIzlozbe, autorIzlozbe, nazivDogadjaja, datumDogadjaja, datumDogadjaja, vrijemeKraja, opisDogadjaja, organizatorDogadjaja, null, sviUcesniciNaJednomDogadjaju, vrstaDogadjaja);
                oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_DOGADJAJ, novaIzlozba));
                Poruka poruka = (Poruka) ois.readObject();
                if(poruka.getIdPoruke().equals(Poruka.IDPoruke.OK)){
                    JOptionPane.showMessageDialog(null, "Dogadjaj: Izlozba - " + nazivDogadjaja + " uspjesno kreiran");
                }
                else{
                    JOptionPane.showMessageDialog(null, "GRESKA!!! \nDogadjaj: Izlozba - " + nazivDogadjaja + " nije kreiran");
                }
                
            }
            else if((dogadjajiComboBox.getSelectedItem()).equals("Predavanje")){
                String vrstaDogadjaja = "Predavanje";
                String temaPredavanja = dodatniTextField1.getText();
                String sadrzajPredavanja = dodatniTextField2.getText();
                Predavac predavac = (Predavac) predavacDogadjajComboBox.getSelectedItem();
                Predavanje novoPredavanje = new Predavanje(temaPredavanja, predavac, sadrzajPredavanja, nazivDogadjaja, datumDogadjaja, datumDogadjaja, vrijemeKraja, opisDogadjaja, organizatorDogadjaja, null, sviUcesniciNaJednomDogadjaju, vrstaDogadjaja);
                oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_DOGADJAJ, novoPredavanje));
                Poruka poruka = (Poruka) ois.readObject();
                if(poruka.getIdPoruke().equals(Poruka.IDPoruke.OK)){
                    JOptionPane.showMessageDialog(null, "Dogadjaj: Predavanje - " + nazivDogadjaja + " uspjesno kreiran");
                }
                else{
                    JOptionPane.showMessageDialog(null, "GRESKA!!! \nDogadjaj: Predavanje - " + nazivDogadjaja + " nije kreiran");
                }
               
            }
            else if((dogadjajiComboBox.getSelectedItem()).equals("Promocija")){
                String vrstaDogadjaja = "Promocija";
                String proizvod = dodatniTextField1.getText();
                String kompanija = dodatniTextField2.getText();
                Promocija novaPromocija = new Promocija(proizvod, kompanija, nazivDogadjaja, datumDogadjaja, datumDogadjaja, vrijemeKraja, opisDogadjaja, organizatorDogadjaja, null, sviUcesniciNaJednomDogadjaju, vrstaDogadjaja);
                oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_DOGADJAJ, novaPromocija));
                Poruka poruka = (Poruka) ois.readObject();
                if(poruka.getIdPoruke().equals(Poruka.IDPoruke.OK)){
                    JOptionPane.showMessageDialog(null, "Dogadjaj: Promocija - " + nazivDogadjaja + " uspjesno kreiran");
                }
                else{
                    JOptionPane.showMessageDialog(null, "GRESKA!!! \nDogadjaj: Promocija - " + nazivDogadjaja + " nije kreiran");
                }
                
            }
             else if((dogadjajiComboBox.getSelectedItem()).equals("Koncert")){
                String vrstaDogadjaja = "Koncert";
                String izvodjac = dodatniTextField1.getText();
                String trajanje = dodatniTextField2.getText();
                Koncert noviKoncert = new Koncert(izvodjac, trajanje, nazivDogadjaja, datumDogadjaja, datumDogadjaja, vrijemeKraja, opisDogadjaja, organizatorDogadjaja, null, sviUcesniciNaJednomDogadjaju, vrstaDogadjaja);
                oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_DOGADJAJ, noviKoncert));
                Poruka poruka = (Poruka) ois.readObject();
                if(poruka.getIdPoruke().equals(Poruka.IDPoruke.OK)){
                    JOptionPane.showMessageDialog(null, "Dogadjaj: Koncert - " + nazivDogadjaja + " uspjesno kreiran");
                }
                else{
                    JOptionPane.showMessageDialog(null, "GRESKA!!! \nDogadjaj: Koncert - " + nazivDogadjaja + " nije kreiran");
                }
                
            }
            else if((dogadjajiComboBox.getSelectedItem()).equals("Ostali događaji")){
                String vrstaDogadjaja = "Ostali dogadjaji";
                OstaliDogadjaji noviOstaliDogadjaji = new OstaliDogadjaji(nazivDogadjaja, datumDogadjaja, datumDogadjaja, vrijemeKraja, opisDogadjaja, organizatorDogadjaja, null, sviUcesniciNaJednomDogadjaju, vrstaDogadjaja);
                oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_DOGADJAJ, noviOstaliDogadjaji));
                Poruka poruka = (Poruka) ois.readObject();
                if(poruka.getIdPoruke().equals(Poruka.IDPoruke.OK)){
                    JOptionPane.showMessageDialog(null, "Dogadjaj: Ostali Dogadjaji - " + nazivDogadjaja + " uspjesno kreiran");
                }
                else{
                    JOptionPane.showMessageDialog(null, "GRESKA!!! \nDogadjaj: Ostali Dogadjaji - " + nazivDogadjaja + " nije kreiran");
                }
                
                
            }
            
            
            oos.writeObject(new Poruka(Poruka.IDPoruke.SVI_DOGADJAJI, null));
            Poruka poruka = (Poruka) ois.readObject();
            ArrayList<Dogadjaj> noviDogadjaji = (ArrayList<Dogadjaj>) poruka.getDodatak();
            PocetnaGUI.popuniTabeluDogadjaja(noviDogadjaji, ucesniciNaDogadjajuTable);
            
            
            pocetnaGUI.setVisible(true);

            dispose();
            
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }//GEN-LAST:event_zavrsiKreiranjeDogadjajaDugmeActionPerformed

    
    private void dodajUcesnikaUTabeluButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajUcesnikaUTabeluButtonActionPerformed
       //uzeti vrijednost iz kombo boksa, parsirati po " " pa pretraziti sveUcesnike
//       String odabraniUcesnik = (String) ucesnikDogadjajaComboBox.getSelectedItem();
        Ucesnik odabraniUcesnik = (Ucesnik) ucesnikDogadjajaComboBox.getSelectedItem();
        System.out.println("pronadjeni UCESNIK IZ dugme event-a" +  odabraniUcesnik);//dobro ispisuje
//       String[] odabraniUcesnik1 = odabraniUcesnik.split(" ");
//       String imeOdabraniUcesnik = odabraniUcesnik1[0];
//       String prezimeOdabraniUcesnik = odabraniUcesnik1[1];
//       Ucesnik pronadjeniUcesnik = pronadjiUcesnika(imeOdabraniUcesnik, prezimeOdabraniUcesnik);
//       System.out.println("pronadjeni UCESNIK IZ dugme event-a" +  pronadjeniUcesnik);//dobro ispisuje
       popuniTabeluUcesniciNaDogadjaju(odabraniUcesnik, ucesniciNaDogadjajuTable);
       for(int i=0; i<sviUcesnici.size(); i++){
           sviUcesnici.remove(odabraniUcesnik);
//       }
        ucesnikDogadjajaComboBox.removeAllItems();
        popuniUcesniciComboBox(ucesnikDogadjajaComboBox);
    }//GEN-LAST:event_dodajUcesnikaUTabeluButtonActionPerformed

    
    
//    private void popuniOsnovnePodatke(Dogadjaj dogadjaj) {
//        dogadjaj.setNazivDogadjaja("Marko");
//        Date datum = datumDogadjajaDateChooser.getDate();
//
//        Calendar kalendar = Calendar.getInstance();
//        kalendar.setTime(datum);
//
//        Calendar pocetakVremena = (Calendar) kalendar.clone();
//        int vrijemeSat = Integer.parseInt(vrijemeSatPocetakDogadjajaTextField.getText());
//        pocetakVremena.set(Calendar.HOUR, vrijemeSat);
//        int vrijemeMinut = Integer.parseInt(vrijemeMinutPocetakDogadjajaTextField.getText());
//        pocetakVremena.set(Calendar.MINUTE, vrijemeMinut);
//
//        Calendar krajVremena = (Calendar) kalendar.clone();
//        int vrijemeSat2 = Integer.parseInt(vrijemeSatKrajDogadjajaTextField.getText());
//        krajVremena.set(Calendar.HOUR, vrijemeSat2);
//        int vrijemeMinut2 = Integer.parseInt(vrijemeMinutKrajDogadjajaTextField.getText());
//        krajVremena.set(Calendar.HOUR, vrijemeMinut2);
//
//        System.out.println(datum);
//        System.out.println(pocetakVremena);
//        System.out.println(krajVremena);
//
   JOptionPane.showMessageDialog(null, "Ucesnik - " + odabraniUcesnik + " uspjesno dodan na dogadjaj.");
    }
    
    public static ArrayList<Organizator> getSviOrganizatori(){
        ArrayList<Organizator> sviOrganizatori = new ArrayList<>();
        try {
            System.out.println("Prije prijema sa servera");
            oos.writeObject(new Poruka(Poruka.IDPoruke.SVI_ORGANIZATORI, null));
            Poruka poruka = (Poruka) ois.readObject();
            sviOrganizatori = (ArrayList<Organizator>) poruka.getDodatak();
            System.out.println("SVI ORGANIZATORI PRIMLJENI SA SERVERA: " + sviOrganizatori);
            
        } 
        catch (Exception ex) {
            ex.printStackTrace();
        }
        System.out.println("SVI ORGANIZATORI kad se pozove iz radsaosobama" + sviOrganizatori);
       return sviOrganizatori;
    }
    
    
    public static ArrayList<Ucesnik> getSviUcesnici(){
        ArrayList<Ucesnik> sviUcesnici = new ArrayList<>();
        try {
            oos.writeObject(new poruka.Poruka(Poruka.IDPoruke.SVI_UCESNICI, null));
            Poruka poruka = (Poruka) ois.readObject();
            sviUcesnici = (ArrayList<Ucesnik>) poruka.getDodatak();
            System.out.println("SVI UCESNICI PRIMLJENI SA SERVERA: " + sviUcesnici);
            
        } 
        catch (Exception ex) {
            ex.printStackTrace();
        }
       return sviUcesnici;
    }
    
    
    public static ArrayList<Predavac> getSviPredavaci(){
        ArrayList<Predavac> sviPredavaci = new ArrayList<>();
        try {
            oos.writeObject(new poruka.Poruka(Poruka.IDPoruke.SVI_PREDAVACI, null));
            Poruka poruka = (Poruka) ois.readObject();
            sviPredavaci = (ArrayList<Predavac>) poruka.getDodatak();
            System.out.println("SVI Predavaci PRIMLJENI SA SERVERA: " + sviPredavaci);
            
        } 
        catch (Exception ex) {
            ex.printStackTrace();
        }
       return sviPredavaci;
    }
    
    private static void popuniOrganizatoriComboBox(JComboBox organizatorDogadjajaComboBox){
        try {
            for(int i=0; i<sviOrganizatori.size(); i++){
              organizatorDogadjajaComboBox.addItem(sviOrganizatori.get(i));   
            }
            //System.out.println("SVI Predavaci PRIMLJENI SA SERVERA: " + sviOrganizatori);
            
        } 
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private static void popuniUcesniciComboBox(JComboBox ucesniciDogadjajaComboBox){
        try {
            for(int i=0; i<sviUcesnici.size(); i++){
             // ucesniciDogadjajaComboBox.addItem(sviUcesnici.get(i).getImeOsobe()+ " " + sviUcesnici.get(i).getPrezimeOsobe());   
            ucesniciDogadjajaComboBox.addItem(sviUcesnici.get(i));
            }
            System.out.println("SVI UCESNICI PRIMLJENI SA SERVERA: " + sviUcesnici);
            
        } 
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    private static void popuniPredavaciComboBox(JComboBox predavaciDogadjajaComboBox){
        try {
            for(int i=0; i<sviPredavaci.size(); i++){
              predavaciDogadjajaComboBox.addItem(sviPredavaci.get(i));   
            }
            System.out.println("SVI PREDAVACI PRIMLJENI SA SERVERA: " + sviPredavaci);
            
        } 
        catch (Exception ex) {
            ex.printStackTrace();
        }
    }
    
    //dodavanje ucesnika u tabelu i listu odabranih ucesnika na jednom dogadjaju
     private static void popuniTabeluUcesniciNaDogadjaju(Ucesnik ucesnikNaDogadjaju, JTable tabelaucesniciNaDogadjajuTable) {
//        DefaultTableCellRenderer centriranje = new DefaultTableCellRenderer();
//        centriranje.setHorizontalAlignment(DefaultTableCellRenderer.CENTER);
//        tabelaDogadjaji.getColumnModel().getColumn(1).setCellRenderer( centriranje ); //centriranje datuma i vremena
//        tabelaDogadjaji.getColumnModel().getColumn(2).setCellRenderer( centriranje );
//        tabelaDogadjaji.getColumnModel().getColumn(3).setCellRenderer( centriranje );
        
        
        //brisanje tabele
//        int rowCount = modelTabelaDogadjaja.getRowCount();
//        for (int i = rowCount - 1; i >= 0; i--) {
//            modelTabelaDogadjaja.removeRow(i);
//
//        }
            System.out.println("odabrani ucesnik ZA TABELU: " + ucesnikNaDogadjaju);
            sviUcesniciNaJednomDogadjaju.add(ucesnikNaDogadjaju);
            System.out.println("svi ucesnici na jednom dogadjaju:" + sviUcesniciNaJednomDogadjaju);
            String imeUcesnik = ucesnikNaDogadjaju.getImeOsobe();
            String prezimeUcesnik = ucesnikNaDogadjaju.getPrezimeOsobe();
            String organizacijaUcesnik = ucesnikNaDogadjaju.getOrganizacijaUcesnik();
            System.out.println(imeUcesnik + " " + prezimeUcesnik + " " + organizacijaUcesnik);
//            Calendar datumDogadjaja = dogadjaj.getDatumPocetkaDogadjaja();
//            Calendar vrijemePocetak = dogadjaj.getVrijemePocetkaDogadjaja();
//            Calendar vrijemeKraj = dogadjaj.getVrijemeKrajaDogadjaja();
//            
//            SimpleDateFormat formatDatum = new SimpleDateFormat("dd.MM.yyyy");
//            SimpleDateFormat formatVremena = new SimpleDateFormat("HH:mm");
//            
//            String formatiranDatum = formatDatum.format(datumDogadjaja.getTime());
//            String formatiranPocetak = formatVremena.format(vrijemePocetak.getTime());
//            String formatiranKraj = formatVremena.format(vrijemeKraj.getTime());
//            Organizator organizator = dogadjaj.getOrganizatorDogadjaja();
//            String vrsta = dogadjaj.getVrstaDogadjaja();
            modelTabelaUcesnici.addRow(new Object[]{imeUcesnik, prezimeUcesnik, organizacijaUcesnik});//P R O B L E M
            System.out.println("POSLIJE DODAVANJA U TABELU");
        
    }
     
     private static Ucesnik pronadjiUcesnika(String imeOdabraniUcesnik, String prezimeOdabraniUcesnik){
         Ucesnik pronadjeniUcesnik = new Ucesnik();
         for(int i = 0; i<sviUcesnici.size(); i++){
             if((sviUcesnici.get(i).getImeOsobe().equals(imeOdabraniUcesnik) && sviUcesnici.get(i).getPrezimeOsobe().equals(prezimeOdabraniUcesnik))){
                 pronadjeniUcesnik = sviUcesnici.get(i);
             }
         }
         
         return pronadjeniUcesnik;
     }
    

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private com.toedter.calendar.JDateChooser datumDogadjajaDateChooser;
    private javax.swing.JLabel datumDogadjajaLabel;
    private javax.swing.JButton dodajUcesnikaUTabeluButton;
    private javax.swing.JLabel dodatnaLabel1;
    private javax.swing.JLabel dodatnaLabel2;
    private javax.swing.JTextField dodatniTextField1;
    private javax.swing.JTextField dodatniTextField2;
    private javax.swing.JLabel dogadjajLabel;
    private javax.swing.JComboBox<String> dogadjajiComboBox;
    private javax.swing.JPanel gornjiPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel kreiranjeDogadjajaiLabel;
    private javax.swing.JLabel nazivDogadjajaLabel;
    private javax.swing.JTextField nazivDogadjajaTextField;
    private javax.swing.JLabel opisDogadjajaLabel;
    private javax.swing.JTextField opisDogadjajaTextField;
    private javax.swing.JComboBox<String> organizatorDogadjajaComboBox;
    private javax.swing.JLabel organizatorDogadjajaLabel;
    private javax.swing.JComboBox<String> predavacDogadjajComboBox;
    private javax.swing.JLabel predavacDogadjajLabel;
    private javax.swing.JTable ucesniciNaDogadjajuTable;
    private javax.swing.JComboBox<String> ucesnikDogadjajaComboBox;
    private javax.swing.JLabel vrijemeDogadjajaLabel;
    private javax.swing.JTextField vrijemeMinutKrajDogadjajaTextField;
    private javax.swing.JTextField vrijemeMinutPocetakDogadjajaTextField;
    private javax.swing.JTextField vrijemeSatKrajDogadjajaTextField;
    private javax.swing.JTextField vrijemeSatPocetakDogadjajaTextField;
    private javax.swing.JButton zavrsiKreiranjeDogadjajaDugme;
    // End of variables declaration//GEN-END:variables
}
