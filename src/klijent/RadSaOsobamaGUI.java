/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package klijent;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;
import osoba.NapomenaOrganizator;
import osoba.Organizator;
import osoba.Osoba;
import osoba.Predavac;
import osoba.Ucesnik;
import poruka.Poruka;

/**
 *
 * @author raka
 */
public class RadSaOsobamaGUI extends javax.swing.JFrame {

    /**
     * Creates new form RadSaOsobamaGUI
     */
    private PocetnaGUI pocetnaGUI;
    private ObjectOutputStream oos;
    private ObjectInputStream ois;
    private ArrayList<Organizator> sviOrganizatori;
    private ArrayList<Predavac> sviPredavaci;
    private ArrayList<Ucesnik> sviUcesnici;
    private DefaultTableModel modelTabeleOsoba;
    private ArrayList<NapomenaOrganizator> nizNapomena;
    private int brojNapomena = 1;

    public RadSaOsobamaGUI(PocetnaGUI pocetnaGUI) {
        try {
            initComponents();
            oos = pocetnaGUI.getOos();
            ois = pocetnaGUI.getOis();

            osobeLabel.setText("Organizatori:");
            dodatnaLabel1.setText("Telefon:");
            dodatnaLabel2.setText("Email:");
            dodatnaLabel3.setText("Datum:");
            dodatnaLabel4.setText("Teks:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(true);
            dodatnaLabel3.setVisible(true);
            dodatnaLabel4.setVisible(true);
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(true);
            dodatniTextField3.setVisible(true);
            dodatniTextField4.setVisible(true);
            textAreaScrollPane.setVisible(true);
            dodatniTextField3.setText(getDatum());
            dodajNapomenuDugme.setVisible(true);
            dodajNapomenuDugme.setText("Dodaj napomenu (" + brojNapomena + ")" );
            nizNapomena = new ArrayList<>();
            brojNapomena = 1;
            modelTabeleOsoba = (DefaultTableModel) osobeTable.getModel();
            sviOrganizatori = getSviOrganizatori();
            sviPredavaci = getSviPredavaci();
            sviUcesnici = getSviUcesnici();
            popuniTabeluOsoba(sviOrganizatori, osobeTable);
            setDefaultCloseOperation(DISPOSE_ON_CLOSE);
            this.pocetnaGUI = pocetnaGUI;
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLayeredPane1 = new javax.swing.JLayeredPane();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        izborOsobeComboBox = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        dodatniTextField1 = new javax.swing.JTextField();
        dodatnaLabel1 = new javax.swing.JLabel();
        prezimeUnosOsobeTextField = new javax.swing.JTextField();
        dodatnaLabel4 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        dodatnaLabel3 = new javax.swing.JLabel();
        dodatnaLabel2 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        dodatniTextField3 = new javax.swing.JTextField();
        imeUnosOsobeTextField = new javax.swing.JTextField();
        dodatniTextField2 = new javax.swing.JTextField();
        textAreaScrollPane = new javax.swing.JScrollPane();
        dodatniTextField4 = new javax.swing.JTextArea();
        dodajNapomenuDugme = new javax.swing.JButton();
        dodajOsobuDugme = new javax.swing.JButton();
        pregledajOsobuDugme = new javax.swing.JButton();
        izbrisiOsobuDugme = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        osobeTable = new javax.swing.JTable();
        osobeLabel = new javax.swing.JLabel();

        javax.swing.GroupLayout jLayeredPane1Layout = new javax.swing.GroupLayout(jLayeredPane1);
        jLayeredPane1.setLayout(jLayeredPane1Layout);
        jLayeredPane1Layout.setHorizontalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );
        jLayeredPane1Layout.setVerticalGroup(
            jLayeredPane1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 100, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setPreferredSize(new java.awt.Dimension(750, 530));
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("RAD SA OSOBAMA");

        jLabel2.setText("Osoba:");

        izborOsobeComboBox.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Organizator", "Predavac", "Ucesnik" }));
        izborOsobeComboBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izborOsobeComboBoxActionPerformed(evt);
            }
        });

        dodatnaLabel1.setText("dodatna1");

        dodatnaLabel4.setText("dodatna4");

        jLabel3.setText("Ime:");

        dodatnaLabel3.setText("dodatna3");

        dodatnaLabel2.setText("dodatna2");

        jLabel4.setText("Prezime:");

        dodatniTextField4.setColumns(20);
        dodatniTextField4.setRows(5);
        textAreaScrollPane.setViewportView(dodatniTextField4);

        dodajNapomenuDugme.setFont(new java.awt.Font("Dialog", 0, 10)); // NOI18N
        dodajNapomenuDugme.setText("Dodaj napomenu");
        dodajNapomenuDugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajNapomenuDugmeActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(dodatnaLabel1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(dodatnaLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(dodatnaLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(dodatnaLabel4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(imeUnosOsobeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(prezimeUnosOsobeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodatniTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodatniTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodatniTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(textAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 156, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodajNapomenuDugme))
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(imeUnosOsobeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(prezimeUnosOsobeTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dodatniTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodatnaLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dodatniTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodatnaLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dodatniTextField3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodatnaLabel3))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(textAreaScrollPane, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(dodatnaLabel4))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(dodajNapomenuDugme, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        dodajOsobuDugme.setText("Dodaj");
        dodajOsobuDugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                dodajOsobuDugmeActionPerformed(evt);
            }
        });

        pregledajOsobuDugme.setText("Pregledaj");
        pregledajOsobuDugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                pregledajOsobuDugmeActionPerformed(evt);
            }
        });

        izbrisiOsobuDugme.setText("Izbrisi");
        izbrisiOsobuDugme.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                izbrisiOsobuDugmeActionPerformed(evt);
            }
        });

        osobeTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                ""
            }
        ));
        jScrollPane1.setViewportView(osobeTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(18, 18, 18)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 50, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(32, 32, 32)
                        .addComponent(izborOsobeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, 168, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(66, 66, 66)
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 603, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(48, 48, 48)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(dodajOsobuDugme, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(pregledajOsobuDugme, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(izbrisiOsobuDugme, javax.swing.GroupLayout.PREFERRED_SIZE, 75, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 359, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(osobeLabel, javax.swing.GroupLayout.Alignment.LEADING))))
                .addGap(122, 122, 122))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(izborOsobeComboBox, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(11, 11, 11)
                        .addComponent(osobeLabel)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 255, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(dodajOsobuDugme)
                    .addComponent(pregledajOsobuDugme)
                    .addComponent(izbrisiOsobuDugme))
                .addGap(22, 22, 22))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void izborOsobeComboBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izborOsobeComboBoxActionPerformed

        String osoba = (String) izborOsobeComboBox.getSelectedItem();
        System.out.println("selektrovani izbor u kombo boxu" + osoba);
        if (osoba.equals("Organizator")) {
            for(int i=0; i<nizNapomena.size(); i++){
            nizNapomena.remove(i);
            }
            brojNapomena = 1;
            nizNapomena.clear();
            osobeLabel.setText("Organizatori:");
            dodatnaLabel1.setText("Telefon:");
            dodatnaLabel2.setText("Email:");
            dodatnaLabel3.setText("Datum:");
            dodatnaLabel4.setText("Teks:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(true);
            dodatnaLabel3.setVisible(true);
            dodatnaLabel4.setVisible(true);
            dodatniTextField3.setText(getDatum());
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(true);
            dodatniTextField3.setVisible(true);
            dodatniTextField4.setVisible(true);
            textAreaScrollPane.setVisible(true);
            dodajNapomenuDugme.setVisible(true);
            dodajNapomenuDugme.setText("Dodaj napomenu (" + brojNapomena + ")" );

            popuniTabeluOsoba(sviOrganizatori, osobeTable);

        } else if (osoba.equals("Predavac")) {
            nizNapomena.clear();
//            for(int i=0; i<nizNapomena.size(); i++){
//            nizNapomena.remove(i);
//            }
            brojNapomena = 1;
            osobeLabel.setText("Predavaci:");
            dodatnaLabel1.setVisible(false);
            dodatnaLabel2.setVisible(false);
            dodatnaLabel3.setVisible(false);
            dodatnaLabel4.setVisible(false);
            dodatniTextField1.setVisible(false);
            dodatniTextField2.setVisible(false);
            dodatniTextField3.setVisible(false);
            dodatniTextField4.setVisible(false);
            textAreaScrollPane.setVisible(false);
            dodajNapomenuDugme.setVisible(false);

            popuniTabeluOsoba(sviPredavaci, osobeTable);
        } else if (osoba.equals("Ucesnik")) {
            nizNapomena.clear();
//            for(int i=0; i<nizNapomena.size(); i++){
//            nizNapomena.remove(i);
//            }
            brojNapomena = 1;
            osobeLabel.setText("Ucesnik:");
            dodatnaLabel1.setText("Organizacija:");
            dodatnaLabel1.setVisible(true);
            dodatnaLabel2.setVisible(false);
            dodatnaLabel3.setVisible(false);
            dodatnaLabel4.setVisible(false);
            dodatniTextField1.setVisible(true);
            dodatniTextField2.setVisible(false);
            dodatniTextField3.setVisible(false);
            dodatniTextField4.setVisible(false);//textArea
            textAreaScrollPane.setVisible(false);//panel u kome se nalazi textArea
            dodajNapomenuDugme.setVisible(false);
            popuniTabeluOsoba(sviUcesnici, osobeTable);
        } else {
            System.out.println("ELSE nakon svih ifova");
        }
    }//GEN-LAST:event_izborOsobeComboBoxActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
        
        
        pocetnaGUI.setVisible(true);
         
    }//GEN-LAST:event_formWindowClosed

    private void dodajOsobuDugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajOsobuDugmeActionPerformed
        Osoba novaOsoba;
        try{
        if (izborOsobeComboBox.getSelectedItem().equals("Organizator")) {
            String imeOrganizatora = imeUnosOsobeTextField.getText();
            String prezimeOrganizatora = prezimeUnosOsobeTextField.getText();
            String telefonOrganizatora = dodatniTextField1.getText();
            String eMailOrganizatora = dodatniTextField2.getText();

            novaOsoba = new Organizator(telefonOrganizatora, eMailOrganizatora, nizNapomena, imeOrganizatora, prezimeOrganizatora);
            oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_ORGANIZATOR, novaOsoba));
            Poruka poruka = (Poruka) ois.readObject();
            sviOrganizatori = (ArrayList<Organizator>) poruka.getDodatak();
            popuniTabeluOsoba(sviOrganizatori, osobeTable);
            obrisiPoljaZaUnosOsobe();
//            for(int i=0; i<nizNapomena.size(); i++){
//            nizNapomena.remove(i);
//            }
            nizNapomena.clear();
            brojNapomena = 1;
            nizNapomena = new ArrayList<>();
            dodajNapomenuDugme.setText("Dodaj napomenu(" + brojNapomena + ")" );
            
            JOptionPane.showMessageDialog(null, "Organizator - " + imeOrganizatora + " " + prezimeOrganizatora +  " uspjesno kreiran.");
        } else if (izborOsobeComboBox.getSelectedItem().equals("Predavac")) {
            String imePredavaca = imeUnosOsobeTextField.getText();
            String prezimePredavaca = prezimeUnosOsobeTextField.getText();
            novaOsoba = new Predavac(imePredavaca, prezimePredavaca);
            oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_PREDAVAC, novaOsoba));
            
            Poruka poruka = (Poruka) ois.readObject();
            sviPredavaci = (ArrayList<Predavac>) poruka.getDodatak();
            popuniTabeluOsoba(sviPredavaci, osobeTable);
            obrisiPoljaZaUnosOsobe();
//            for(int i=0; i<nizNapomena.size(); i++){
//            nizNapomena.remove(i);
//            }
            nizNapomena.clear();
            brojNapomena = 1;
            JOptionPane.showMessageDialog(null, "Predavac - " + imePredavaca + " " + prezimePredavaca +  " uspjesno kreiran.");
        } else if (izborOsobeComboBox.getSelectedItem().equals("Ucesnik")) {
            String imeUcesnika = imeUnosOsobeTextField.getText();
            String prezimeUcesnika = prezimeUnosOsobeTextField.getText();
            String organizacija = dodatniTextField1.getText();
            novaOsoba = new Ucesnik(organizacija, imeUcesnika, prezimeUcesnika);
            oos.writeObject(new Poruka(Poruka.IDPoruke.NOVI_UCESNIK, novaOsoba));
            
            Poruka poruka = (Poruka) ois.readObject();
            sviUcesnici = (ArrayList<Ucesnik>) poruka.getDodatak();
            popuniTabeluOsoba(sviUcesnici, osobeTable);
            obrisiPoljaZaUnosOsobe();
//            for(int i=0; i<nizNapomena.size(); i++){
//            nizNapomena.remove(i);
//            }
            nizNapomena.clear();
            brojNapomena = 1;
            JOptionPane.showMessageDialog(null, "Ucesnik - " + imeUcesnika + " " + prezimeUcesnika +  " uspjesno kreiran.");
        }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_dodajOsobuDugmeActionPerformed

    private void dodajNapomenuDugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_dodajNapomenuDugmeActionPerformed
        
        System.out.println("NIZ NAPOMENA PRILIKO KLIKA NA DUGME DODAJ NA POCETKU " + nizNapomena);
        Calendar datumNapomene = Calendar.getInstance();
        String datum = dodatniTextField3.getText();
        String[] datum1 = datum.split("\\.");
        for(int i=0; i<datum1.length; i++)
            System.out.println(datum1[i]);
        int god = Integer.parseInt(datum1[2]);
        int mje = Integer.parseInt(datum1[1]);
        int dan = Integer.parseInt(datum1[0]);
        datumNapomene.set(god, mje, dan);
        String napomena = dodatniTextField4.getText();
        NapomenaOrganizator napomenaOrganizator = new NapomenaOrganizator(datumNapomene, napomena);
        nizNapomena.add(napomenaOrganizator);
        JOptionPane.showMessageDialog(null, brojNapomena + ". napomena uspjesno dodata. ");
        brojNapomena++;
        dodajNapomenuDugme.setText("Dodaj napomenu(" + brojNapomena + ")" );
        dodatniTextField4.setText("");
    }//GEN-LAST:event_dodajNapomenuDugmeActionPerformed

    private void izbrisiOsobuDugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_izbrisiOsobuDugmeActionPerformed
        Osoba osobaZaBrisanje;
        try{
        if (izborOsobeComboBox.getSelectedItem().equals("Organizator")) {
            int indeks = osobeTable.getSelectedRow();
            String imeOsobe = sviOrganizatori.get(indeks).getImeOsobe() + sviOrganizatori.get(indeks).getPrezimeOsobe();
            oos.writeObject(new Poruka(Poruka.IDPoruke.BRISANJE_ORGANIZATORA, indeks));
            Poruka poruka = (Poruka) ois.readObject();
            sviOrganizatori = (ArrayList<Organizator>) poruka.getDodatak();
            popuniTabeluOsoba(sviOrganizatori, osobeTable);
            JOptionPane.showMessageDialog(null, "Osoba: " + imeOsobe + " je uspjesno izbrisana. ");
          //  obrisiPoljaZaUnosOsobe();
        } else if (izborOsobeComboBox.getSelectedItem().equals("Predavac")) {
            int indeks = osobeTable.getSelectedRow();
            String imeOsobe = sviPredavaci.get(indeks).getImeOsobe() + sviPredavaci.get(indeks).getPrezimeOsobe();
            oos.writeObject(new Poruka(Poruka.IDPoruke.BRISANJE_PREDAVACA, indeks));
            Poruka poruka = (Poruka) ois.readObject();
            sviPredavaci = (ArrayList<Predavac>) poruka.getDodatak();
            popuniTabeluOsoba(sviPredavaci, osobeTable);
            JOptionPane.showMessageDialog(null, "Osoba: " + imeOsobe + " je uspjesno izbrisana. ");
            //obrisiPoljaZaUnosOsobe();
        } else if (izborOsobeComboBox.getSelectedItem().equals("Ucesnik")) {
           int indeks = osobeTable.getSelectedRow();
           String imeOsobe = sviUcesnici.get(indeks).getImeOsobe() + sviUcesnici.get(indeks).getPrezimeOsobe();
            //osobaZaBrisanje = (Organizator) modelTabeleOsoba.getValueAt(indeks, 0);
            oos.writeObject(new Poruka(Poruka.IDPoruke.BRISANJE_UCESNIKA, indeks));
            Poruka poruka = (Poruka) ois.readObject();
            sviUcesnici = (ArrayList<Ucesnik>) poruka.getDodatak();
            popuniTabeluOsoba(sviUcesnici, osobeTable);
            JOptionPane.showMessageDialog(null, "Osoba: " + imeOsobe + " je uspjesno izbrisana. ");
            //obrisiPoljaZaUnosOsobe();
        }
        }
        catch(Exception ex){
            ex.printStackTrace();
        }
    }//GEN-LAST:event_izbrisiOsobuDugmeActionPerformed

    private void pregledajOsobuDugmeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_pregledajOsobuDugmeActionPerformed
         if (izborOsobeComboBox.getSelectedItem().equals("Organizator")) {
          int indeks = osobeTable.getSelectedRow();
          Organizator organizatorZaPregled = sviOrganizatori.get(indeks);
          this.setVisible(false);
          new PregledOsobeGUI(this, organizatorZaPregled);
        } else if (izborOsobeComboBox.getSelectedItem().equals("Predavac")) {
            int indeks = osobeTable.getSelectedRow();
          Predavac predavacZaPregled = sviPredavaci.get(indeks);
          this.setVisible(false);
          new PregledOsobeGUI(this, predavacZaPregled);
        } else if (izborOsobeComboBox.getSelectedItem().equals("Ucesnik")) {
           int indeks = osobeTable.getSelectedRow();
          Ucesnik ucesnikZaPregled = sviUcesnici.get(indeks);
          this.setVisible(false);
          new PregledOsobeGUI(this, ucesnikZaPregled);
        }
    }//GEN-LAST:event_pregledajOsobuDugmeActionPerformed

    /**
     * @param args the command line arguments
     */

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton dodajNapomenuDugme;
    private javax.swing.JButton dodajOsobuDugme;
    private javax.swing.JLabel dodatnaLabel1;
    private javax.swing.JLabel dodatnaLabel2;
    private javax.swing.JLabel dodatnaLabel3;
    private javax.swing.JLabel dodatnaLabel4;
    private javax.swing.JTextField dodatniTextField1;
    private javax.swing.JTextField dodatniTextField2;
    private javax.swing.JTextField dodatniTextField3;
    private javax.swing.JTextArea dodatniTextField4;
    private javax.swing.JTextField imeUnosOsobeTextField;
    private javax.swing.JComboBox<String> izborOsobeComboBox;
    private javax.swing.JButton izbrisiOsobuDugme;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLayeredPane jLayeredPane1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel osobeLabel;
    private javax.swing.JTable osobeTable;
    private javax.swing.JButton pregledajOsobuDugme;
    private javax.swing.JTextField prezimeUnosOsobeTextField;
    private javax.swing.JScrollPane textAreaScrollPane;
    // End of variables declaration//GEN-END:variables

    public static String getDatum() {
        Calendar datum = Calendar.getInstance();
        datum.add(Calendar.DATE, 0);
        SimpleDateFormat formatDatum = new SimpleDateFormat("dd.MM.yyyy");
// Output "Wed Sep 26 14:23:28 EST 2012"
        String formatiranDatum = formatDatum.format(datum.getTime());

        return formatiranDatum;
// Output "2012-09-26"
    }

    private <T> void popuniTabeluOsoba(ArrayList<T> sveOsobe, JTable osobeTable) {
        //   brisanje tabele
        int rowCount = modelTabeleOsoba.getRowCount();
        for (int i = rowCount - 1; i >= 0; i--) {
            modelTabeleOsoba.removeRow(i);
        }
        for (T osoba : sveOsobe) {
            modelTabeleOsoba.addRow(new Object[]{osoba});
        }
    }

    public ArrayList<Predavac> getSviPredavaci() {
        ArrayList<Predavac> sviPredavaci = new ArrayList<>();
        try {
            oos.writeObject(new poruka.Poruka(Poruka.IDPoruke.SVI_PREDAVACI, null));
            Poruka poruka = (Poruka) ois.readObject();
            sviPredavaci = (ArrayList<Predavac>) poruka.getDodatak();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return sviPredavaci;
    }

    public ArrayList<Ucesnik> getSviUcesnici() {
        ArrayList<Ucesnik> sviUcesnici = new ArrayList<>();
        try {
            oos.writeObject(new poruka.Poruka(Poruka.IDPoruke.SVI_UCESNICI, null));
            Poruka poruka = (Poruka) ois.readObject();
            sviUcesnici = (ArrayList<Ucesnik>) poruka.getDodatak();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return sviUcesnici;
    }

    public ArrayList<Organizator> getSviOrganizatori() {
        ArrayList<Organizator> sviOrganizatori = new ArrayList<>();
        try {
            oos.writeObject(new Poruka(Poruka.IDPoruke.SVI_ORGANIZATORI, null));
            Poruka poruka = (Poruka) ois.readObject();
            sviOrganizatori = (ArrayList<Organizator>) poruka.getDodatak();

        } catch (Exception ex) {
            ex.printStackTrace();
        }
        return sviOrganizatori;
    }

    private void obrisiPoljaZaUnosOsobe() {
        
        imeUnosOsobeTextField.setText("");
        prezimeUnosOsobeTextField.setText("");
        dodatniTextField1.setText("");
        dodatniTextField2.setText("");
       // dodatniTextField3.setText("");
        dodatniTextField4.setText("");
        brojNapomena = 1;
    }

}
